install.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
menu()
0
info()
main()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
play()
setwd("~/DTU/SP/coursera")
old.dir <- getwd()
old.dir
nxt()
dir.create('testdir')
setwd('testdir')
file.create('mytest.R')
dir()
file.exists(mytest.R)
file.exists('mytest.R')
file.info(mytest.R)
file.info('mytest.R')
file.rename('mytest.R','mytest2.R')
file.copy('mytest2.R','mytest3.R')
file.path(mytest3.R)
file.path('mytest3.R')
?file.path
file.path('folder1','folder2')
?dir.create
dir.create(file.path('testdir2','testdir3'), recursive = FALSE)
dir.create(file.path('testdir2','testdir3'), recursive = TRUE)
setwd(old.dir)
swirl()
5+7
x <- 5+7
x
x-3
y<-x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
swirl()
swirl::install_course("Advanced R Programming")
swirl()
exit()
clear()
lear
clearPushBack()
rm(list=ls())
library('swirl')
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins','twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[-1]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram('Bip','bim','bap')
submit()
submit()
mad_libs(place='here', adjective='brave', noun='toilet')
submit()
submit()
submit()
'I' %p% 'Love' %p% 'R!'
'I' %p% 'love' %p% 'R!'
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips <- sample(100, c(0, 1), replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
swirl()
data(cars)
help(cars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlabel = "Speed")
?plot
plot(x = cars$speed, y = cars$dist, xaxis = "Speed")
plot(x = cars$speed, y = cars$dist, labels = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
play()
str(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
swirl()
install.packages(c("scales", "RColorBrewer", "MASS", "Rtsne", "kohonen", "miscTools", "gplots", "Radviz", "igraph", "statmod"))
source("https://bioconductor.org/biocLite.R")
biocLite(c("flowCore", "cytofkit", "ConsensusClusterPlus", "cydar", "flowCL", "CATALYST", "ncdfFlow", "edgeR"))
warnings()
library(FlowSOM)
library(flowsom)
library(devtools)
install_github("nolanlab/cytofCore")
install.packages("devtools")
?FlowSOM
??FlowSOM
biocLite(c("flowCore")
)
biocLite(c("flowCore"))
install.packages("mvtnorm")
biocLite(c("mvtnorm"))
biocLite(c("flowCore"))
biocLite(c("flowCore"))
install.packages("mvtnorm")
library(mvtnorm)
install.packages("mvtnorm")
version()
install.packages("vegan")
library("vegan")
load(url("http://teaching.healthtech.dtu.dk/material/22126/Counts_NGS.RData"))
head(Counts)
str(Counts)
sampleDepth<-(colSums(Counts))
hist(sampleDepth, breaks=100, ylab="Number of samples", xlab="Number of reads", main="Sample depth")
range(sampleDepth)
load(url("http://teaching.healthtech.dtu.dk/material/22126//taxonomy_species.RData"))
head(taxonomy_species)
taxCounts<-apply(Counts, 2, tapply, INDEX=taxonomy_species, sum)
str(taxCounts)
head(taxCounts)
str(taxCounts)
dimnames(taxCounts)
str(taxCounts)
species_richness<-(colSums(taxCounts>0))
require(vegan)
specesDiversity <- diversity(y(taxCounts), index = 'shannon')
specesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(specesDiversity) <- NULL
par(mfrow=c(1,1))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
specesDiversity <- diversity(t(taxCounts), index = 'shannon')
spiecesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(spiecesDiversity) <- NULL
par(mfrow=c(1,1))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
speciesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(speciesDiversity) <- NULL
par(mfrow=c(1,1))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
plot(species_richness,speciesDiversity,xlab="Richness", ylab="Shannon diversity index")
library("vegan")
load(url("http://teaching.healthtech.dtu.dk/material/22126/Counts_NGS.RData"))
head(Counts)
str(Counts)
# head(Counts)
str(Counts)
sampleDepth<-(colSums(Counts))
range(sampleDepth)
## Species
```{r}
str(taxCounts)
names(species_richness) <- NULL
```{r}
species_richness<-(colSums(taxCounts>0))
names(species_richness) <- NULL
require(vegan)
speciesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(speciesDiversity) <- NULL
par(mfrow=c(1,1))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
plot(species_richness,speciesDiversity,xlab="Richness", ylab="Shannon diversity index")
species_richness<-(colSums(taxCounts>0))
names(species_richness) <- NULL
require(vegan)
speciesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(speciesDiversity) <- NULL
par(mfrow=c(1,3))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
plot(species_richness,speciesDiversity,xlab="Richness", ylab="Shannon diversity index")
species_richness<-(colSums(taxCounts>0))
names(species_richness) <- NULL
require(vegan)
speciesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(speciesDiversity) <- NULL
par(mfrow=c(3,1))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
plot(species_richness,speciesDiversity,xlab="Richness", ylab="Shannon diversity index")
plot(sampleDepth, pch=20, log="y", xlab="Samples", ylab="Number of reads")
species_richness<-(colSums(taxCounts>0))
names(species_richness) <- NULL
require(vegan)
speciesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(speciesDiversity) <- NULL
par(mfrow=c(1,1))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
plot(species_richness,speciesDiversity,xlab="Richness", ylab="Shannon diversity index")
species_richness<-(colSums(taxCounts>0))
names(species_richness) <- NULL
require(vegan)
speciesDiversity <- diversity(t(taxCounts), index = 'shannon')
names(speciesDiversity) <- NULL
par(mfrow=c(1,1))
barplot(sort(species_richness), las=3, main="Species richness", xlab="Samples", ylab="Richness")
barplot(sort(speciesDiversity), xlab="Samples", las=3, main="Diversity (Shannon)")
plot(species_richness,speciesDiversity,xlab="Richness", ylab="Shannon diversity index")
downsizeTarget <- 4*10**6
plot(sampleDepth, pch=20, log="y", xlab="Samples", ylab="Number of reads"); abline(h=downsizeTarget)
downsizeTarget <- 5*10**6
plot(sampleDepth, pch=20, log="y", xlab="Samples", ylab="Number of reads"); abline(h=downsizeTarget)
str(sampleDepth)
count(sampleDepth[sampleDepth >= downsizeTarget])
length(sampleDepth[sampleDepth >= downsizeTarget])
length(sampleDepth[sampleDepth < downsizeTarget])
365+36
dz_Counts<-round(t(t(Counts)*downsizeTarget/sampleDepth))
weak_samples<-sampleDepth<downsizeTarget
dz_Counts[,weak_samples]<-NA # samples that did not make the cut
dz_taxCounts<-apply(dz_Counts, 2, tapply, INDEX=taxonomy_species, sum); gc()
dz_species_richness<-(colSums(dz_taxCounts>0))
names(dz_species_richness)<-NULL
require(vegan)
dz_speciesDiversity<-diversity(t(dz_taxCounts), index = "shannon")
dz_speciesDiversity[weak_samples]<-NA
names(dz_speciesDiversity)<-NULL
par(mfrow=c(1,1), pch=1)
barplot(sort(dz_species_richness), las=3, main="Species richness (Downsized)", xlab="Species", ylab="Richness")
par(mfrow=c(1,1), pch=1)
barplot(sort(dz_species_richness), las=3, main="Species richness (Downsized)", xlab="Species", ylab="Richness")
barplot(sort(dz_speciesDiversity), las=3,main="Shannon's diversity index (downsized)", xlab="Species", ylab="Shannon diversity")
barplot(sort(dz_speciesDiversity), las=3,main="Shannon's diversity index (downsized)", xlab="Species", ylab="Shannon diversity")
par(mfrow=c(1,1), pch=1)
barplot(sort(dz_species_richness), las=3, main="Species richness (Downsized)", xlab="Species", ylab="Richness")
barplot(sort(dz_speciesDiversity), las=3,main="Shannon's diversity index (downsized)", xlab="Species", ylab="Shannon diversity")
plot(dz_species_richness,species_richness, xlab="downsized richness", ylab="raw richness", main="Richness")
par(mfrow=c(1,1), pch=1)
barplot(sort(dz_species_richness), las=3, main="Species richness (Downsized)", xlab="Species", ylab="Richness")
barplot(sort(dz_speciesDiversity), las=3,main="Shannon's diversity index (downsized)", xlab="Species", ylab="Shannon diversity")
plot(dz_species_richness,species_richness, xlab="downsized richness", ylab="raw richness", main="Richness")
plot(dz_speciesDiversity,speciesDiversity,xlab="downsized species diversity", ylab="raw species diversity",main="Diversity (Shannon)")
par(mfrow=c(1,2))
barplot(taxCounts[,4], main="Person 4, SD > 3", xaxt="n", xlab="Species", ylab="Normalized abundance")
barplot(taxCounts[,240], main="Person 240, SD < 0.5", xaxt="n", xlab="Species", ylab="Normalized abundance")
par(mfrow=c(1,1))
load(url("http://teaching.healthtech.dtu.dk/material/22126/BMI.RData"))
load(url("http://teaching.healthtech.dtu.dk/material/22126/BMI.RData"))
load(url("http://teaching.healthtech.dtu.dk/material/22126/BMI.RData"))
load(url("http://teaching.healthtech.dtu.dk/material/22126/BMI.RData"))
load(url("http://teaching.healthtech.dtu.dk/material/22126/BMI.RData"))
boxplot(BMI$BMI.kg.m2 ~ BMI$Class, col=c("red", "gray","blue"), ylab="BMI")
wilcox.test(x=dz_taxCounts["Escherichia coli",BMI$Classification=="ob"], y=dz_taxCounts["Escherichia coli",BMI$Classification=="le"] )
tapply(dz_taxCounts["Escherichia coli",], BMI$Classification, mean, na.rm=TRUE)
wilcox.test(x=dz_taxCounts["Escherichia coli",BMI$Classification=="ob"], y=dz_taxCounts["Escherichia coli",BMI$Classification=="le"] )
tapply(dz_taxCounts["Escherichia coli",], BMI$Classification, mean, na.rm=TRUE)
pval<-apply(dz_taxCounts, 1, function(V){wilcox.test(x=V[BMI$Classification=="ob"],y=V[BMI$Classification=="le"])$p.value})
Abundance_ratio<-log2(apply(dz_taxCounts, 1,function(V){mean(x=V[BMI$Classification=="ob"], na.rm=TRUE)/mean(V[BMI$Classification=="le"], na.rm=TRUE)}))
pval.adjust = p.adjust(pval, method="BH")
plot(sort(pval.adjust), log="y", pch=16, xlab="Species", ylab="p-values")
abline(h=0.05, col="grey", lty=2)
o<-order(pval)
BMIstat<-data.frame(pval,pval.adjust, Abundance_ratio)[o,]
BMIstat[1:10,]
par(mar=c(5,18,5,5))
barplot(BMIstat[1:10,3], names.arg=rownames(BMIstat)[1:10], las=1,xlab="log fold difference between lean and obese", horiz=TRUE)
o<-order(pval)
BMIstat<-data.frame(pval,pval.adjust, Abundance_ratio)[o,]
BMIstat[1:10,]
par(mar=c(5,18,5,5))
barplot(BMIstat[1:10,3], names.arg=rownames(BMIstat)[1:10], las=1,xlab="log fold difference between lean and obese", horiz=TRUE)
o<-order(pval)
BMIstat<-data.frame(pval,pval.adjust, Abundance_ratio)[o,]
BMIstat[1:10,]
par(mar=c(5,18,5,5))
barplot(BMIstat[1:10,3], names.arg = rownames(BMIstat)[1:10], las=1,xlab="log fold difference between lean and obese", horiz=TRUE)
library(RColorBrewer)
library(gplots)
vdist = as.matrix(vegdist(t(taxCounts)))
rownames(vdist) = colnames(vdist)
hmcol = colorRampPalette(brewer.pal(9, "GnBu"))(100)
heatmap.2(vdist, trace='none', col=rev(hmcol))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
cts <- taxCounts
coldata = BMI[,1]
coldata = matrix(NA, nrow=nrow(BMI), ncol=1)
coldata[,1] = as.vector(BMI[,1])
rownames(coldata) = rownames(BMI)
colnames(coldata) = "BMI"
library(RColorBrewer)
library(gplots)
vdist = as.matrix(vegdist(t(taxCounts)))
rownames(vdist) = colnames(vdist)
hmcol = colorRampPalette(brewer.pal(9, "GnBu"))(100)
heatmap.2(vdist, trace='none', col=rev(hmcol))
my.rda <- rda(t(taxCounts))
biplot(my.rda, display = c("sites", "species"), type = c("text", "points"))
if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
cts <- taxCounts
coldata = BMI[,1]
coldata = matrix(NA, nrow=nrow(BMI), ncol=1)
coldata[,1] = as.vector(BMI[,1])
rownames(coldata) = rownames(BMI)
colnames(coldata) = "BMI"
if (!requireNamespace("BiocManager", quietly = TRUE))
# install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
cts <- taxCounts
coldata = BMI[,1]
coldata = matrix(NA, nrow=nrow(BMI), ncol=1)
coldata[,1] = as.vector(BMI[,1])
rownames(coldata) = rownames(BMI)
colnames(coldata) = "BMI"
# install.packages("BiocManager")
# BiocManager::install("DESeq2")
library(DESeq2)
cts <- taxCounts
coldata = BMI[,1]
coldata = matrix(NA, nrow=nrow(BMI), ncol=1)
coldata[,1] = as.vector(BMI[,1])
rownames(coldata) = rownames(BMI)
colnames(coldata) = "BMI"
coldata
head(coldata)
all(rownames(coldata) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts, colData = coldata, design = ~ BMI)
dds <- DESeq(dds)
res <- results(dds)
res
resOrdered <- res[order(res$pvalue),]
head(resOrdered)
library(swirl)
install.packages('swirl')
library(swirl)
swirl()
remove.packages('swirl')
version
library(tidyverse)
install.packages('tidyverse')
list.of.packages <- c('optparse','graphics', 'aricode','ggplot2')
loading = suppressWarnings(suppressMessages(lapply(list.of.packages, require, character.only = TRUE)))
source('functions.R')
setwd("~/dtu/SP/project/scripts")
n_stable <- 1000
patients <- c('001', '284d2', '84-0001-01', '885d1', '885d3', '885d4', '885d5', 'Pat03', 'Pat05', "all")
datafile <- '~/Documents/FCS_data/data_transformed.RData'#"../data/data_transformed.Rdata"
load(datafile, envir = parent.frame(), verbose = FALSE)
datafile <- '/home/shdam/Documents/FCS_data/data_transformed.RData'#"../data/data_transformed.Rdata"
load(datafile, envir = parent.frame(), verbose = FALSE)
datafile <- '/home/shdam/Documents/FCS_data/data_transformed.Rdata'#"../data/data_transformed.Rdata"
load(datafile, envir = parent.frame(), verbose = FALSE)
## Population
ggplot(expr_trans, aes(x=sample, fill = population)) +
geom_bar() +
labs(x = 'Patient', y = 'Count', title = 'Cell type distribution for each patient', fill = 'Cell type')
ggsave('../results/04_figs/population.png', scale = 1.2)
